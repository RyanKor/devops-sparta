name: Build, Push Docker Image and Deploy to AWS EC2

on:
  push:
    paths:
      - '.github/workflows/aws_cicd_final.yaml'

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Check out the repository
        uses: actions/checkout@v3

      # 커스텀 액션 호출
      - name: Run my custom Docker build/test/push action
        uses: ./.github/actions/custom-docker-build
        with:
          # 위 action.yml에서 정의한 inputs
          image_name: "ryankor/devops-sparta"
          image_tag: "aws-cicd-final-0.0.1"
          context: "04-test-fastapi"
          file: "04-test-fastapi/Dockerfile"

          만약 사용자/패스워드를 받아야 한다면(위 action.yml에서 추가했다면):
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }}

  deploy-to-ec2:
    name: Deploy to AWS EC2
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # (선택) AWS CLI 설정 (필요 시)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # 해당하는 AWS 리전으로 변경

      # 1. EC2에 SSH 접속하여 Docker 설치 및 컨테이너 실행
      - name: SSH into EC2 and deploy Docker container
        uses: appleboy/ssh-action@v0.1.16
        with:
          host: ${{ secrets.EC2_HOST }}           # EC2의 Public IP 또는 DNS
          username: ubuntu                        # EC2 인스턴스의 사용자 이름 (예: ubuntu, ec2-user)
          key: ${{ secrets.EC2_SSH_KEY }}         # SSH Private Key (PEM 파일 내용)
          port: 22                                 # SSH 포트 (기본값: 22)
          script: |
            set -e  # 오류 발생 시 스크립트 중단

            # 1) Docker 설치 여부 확인
            if ! command -v docker &> /dev/null
            then
              echo "Docker not found. Installing Docker..."

              # 업데이트 및 필수 패키지 설치
              sudo apt-get update -y
              sudo apt-get install -y \
                ca-certificates \
                curl \
                gnupg \
                lsb-release

              # Docker 공식 GPG 키 추가
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

              # Docker 저장소 설정
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

              # Docker Engine 설치
              sudo apt-get update -y
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

              # 현재 사용자를 docker 그룹에 추가 (필요 시)
              sudo usermod -aG docker $USER

              echo "Docker installed successfully."
            else
              echo "Docker is already installed."
            fi

            # 2) Docker Hub 로그인
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # 3) 기존 컨테이너 중단 및 제거 (존재 시)
            if [ "$(docker ps -q -f name=aws-fastapi-final)" ]; then
              docker stop aws-fastapi-final
            fi

            if [ "$(docker ps -aq -f status=exited -f name=aws-fastapi-final)" ]; then
              docker rm aws-fastapi-final
            fi

            # 4) 최신 이미지 Pull
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/devops-sparta:aws-cicd-final-0.0.1

            # 5) 컨테이너 실행
            docker run -d \
              -p 8000:8000 \
              --name aws-fastapi-final \
              ${{ secrets.DOCKERHUB_USERNAME }}/devops-sparta:aws-cicd-final-0.0.1

            echo "Docker container deployed successfully."
